[uwsgi]

; Spin up 12 copies, 2 for each processor.
workers = 12

; Each uwsgi subprocess starts a single Python interpreter.
single-interpreter = true

; Start a master uwsgi process that manages the subprocesses.
master = true

; Enable Python support.  Yes, you have to do this even though uwsgi is
; written in Python.
plugin = python

; Start a copy of the Searx worker subprocess.
lazy-apps = true

; Enable threads in the subprocesses.  This seems to make some of Searx's
; engines more stable.
enable-threads = true

; This is the Python module path to the code to start up, relative to where
; this file is found.  In this case searx.ini is in ~/searx so the path is
; searx/webapp.py.  For more information, read up on how Python generates
; its module paths.
module = searx.webapp

; Where the virtualenv lives.
virtualenv = /home/phlight/.local/repositories/searx/env/

; Where Searx was checked out to.
pythonpath = /home/phlight/.local/repositories/searx/

; The directory where the guts of Searx are.
chdir = /home/phlight/.local/repositories/searx/searx/

; Start the HTTP server, listen on the loopback interface, port 8888.  This
; is what your web browser (or agents) connect to.
http-socket = 127.0.0.1:8888

; Don't log anything.
disable-logging = true

; Always route requests to workers without condition checking.
; Sets the script name without altering the path info.
route-run = fixpathinfo:

; Later commits of Searx require that you configure an in-memory cache.
; This is the uWSGI new generation cache subsystem.
; Name the cache 'searxcache'.  Store a maximum of 2000 items in the cache.
; Set the number of blocks in the cache to 2000, each block is 4k in size.
; Create an internal bitmap that keeps track of whether or not a block has
; been used to store something.
cache2 = name=searxcache,items=2000,blocks=2000,blocksize=4096,bitmap=1
